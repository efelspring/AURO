
--
-- RoboChart generator version 3.0.0.202408051513
-- Automatically generated on 14-10-2024 14:42:16
--
-- Iterated compression status: true
-- Assertions compression status: false
--

module myPackage_Module
	exports
	
	transparent diamond
	transparent sbisim
	transparent dbisim
	transparent chase
	
	-- declaring channels
	-- declaring robotic platform events
	channel scan: InOut.LSeq(core_real,2)
	
	channel cmd_velCall: myPackage_Twist
	
	-- declaring module termination channel
	channel terminate
	
	-- declaring robotic platform variables
	
	-- channel set with all visible events
	sem__events = {|
		scan
	,	cmd_velCall
	|}
	
	-- declaring controller
		module ctrl_ref0
			shared_variable_events = {|
			|}
			
		exports
			transparent diamond
			transparent sbisim
			transparent dbisim
			transparent chase
	
			-- declaring controller events
			
			
			
			-- declaring call and ret events for undefined operations
			channel cmd_velCall: myPackage_Twist
			
			-- declaring controller termination channel
			channel terminate
			
			-- channel set with all visible events
			sem__events = {|
				terminate
			,	cmd_velCall
			|}
			
			-- set of visible memory events
			visibleMemoryEvents = {||}
	
			-- defined operations
			-- compileOperationDef
			module OP_move
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
				
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_f0
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				channel cmd_velCall: myPackage_Twist
				
				enterSS = {|
				i0::enter,
				f0::enter
				|}
				
				enteredSS = 	{|
				f0::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	cmd_velCall
					, share__
					|}
				
				channel clockReset, clockResetL, clockResetR 
				
				localClockResets = {||}
				
				
				channel get_CLID_f0 : core_clock_type 
				--channel increment__
				
				CLID_f0_clock_type(id__) = 
					let
						max = (clock_type_max(Union({
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
				
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
										param_lvel,
										param_avel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
										param_lvel,
										param_avel) = D__(id__,
										param_lvel,
										param_avel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- Final state: f0
					module f0
					
					exports
					
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							D__(id__,
										param_lvel,
										param_avel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Entering
									
									Entering 	= entered -> SKIP ; Active
									Active		= share__choice(terminate -> SKIP [] interrupt -> SKIP) ; Interrupted
									Interrupted	= share__choice(exit -> exited -> Inactive)
								within
									Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
										param_lvel,
										param_avel) = D__(id__,
										param_lvel,
										param_avel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__cmd_vel(id__,
								param_msg) = EDeadline(cmd_velCall.param_msg,0)
					
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
								param_lvel,
								param_avel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_lvel,
								param_avel) \ {terminate}
					
					STM_VS_O(id__,
								param_lvel,
								param_avel) = -- RULE: [[stm:OperationDef]]_STM^nops : CSPProcess
					Stateful(id__,
								param_lvel,
								param_avel) \ {terminate}
					
					-- Transitions
					Transitions(id__,
								param_lvel,
								param_avel) = ((let
						Trans = TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((true&CALL__cmd_vel(
							 			id__,
							 			((param_lvel,0,0),(0,0,param_avel))
							 		) ; f0::enter -> SKIP))))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
								param_lvel,
								param_avel) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   			param_lvel,
									   			param_avel)
									   [| { share__, terminate } |] (
									   f0::D__(id__,
									   			param_lvel,
									   			param_avel)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			param_lvel,
									 			param_avel))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
								param_lvel,
								param_avel) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody(id__,
										param_lvel,
										param_avel) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ union(stateClockSync,enteredSS)
						)
						)
					
					
					Stateful(id__,
								param_lvel,
								param_avel) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour(id__,
										param_lvel,
										param_avel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_lvel,
							 			param_avel) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
								param_lvel,
								param_avel) = 
						dbisim((
						let
							finalNodesEntered = {|f0::entered|}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								f0::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   			param_lvel,
									   			param_avel)
									   [| { share__, terminate } |] (
									   f0::VS_O__(id__,
									   			param_lvel,
									   			param_avel)
									   )
									 )
									 [[f0::interrupt <- x__ | x__ <- {|interrupt|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 			param_lvel,
									 			param_avel))
									  [[ share__ <- x__ | x__ <- {| share__ |} ]]
									 )
									)
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
								param_lvel,
								param_avel) = 
						dbisim((let
							stateClockSync = {||}
						 within
							(MachineBody_VS_O(id__,
										param_lvel,
										param_avel) [| union(stateClockSync,{terminate}) |] StateClocks(id__)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					
					Stateful_VS_O(id__,
								param_lvel,
								param_avel) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {||}
						within
							(Behaviour_VS_O(id__,
										param_lvel,
										param_avel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 			param_lvel,
							 			param_avel) [| {terminate} |] Clocks(id__))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
								param_lvel,
								param_avel) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
								param_lvel,
								param_avel) = STM_VS_O(id__,
								param_lvel,
								param_avel) \ localClockResets
					D__(id__,
								param_lvel,
								param_avel) = timed_priority(STM(id__,
								param_lvel,
								param_avel) \ union(internal_events,localClockResets))
					O__(id__,
								param_lvel,
								param_avel) = dbisim(D__(id__,
								param_lvel,
								param_avel))
					VS__(id__,
								param_lvel,
								param_avel) = FVS__(id__,
								param_lvel,
								param_avel)
					VS_O__(id__,
								param_lvel,
								param_avel) = dbisim(FVS__(id__,
								param_lvel,
								param_avel))
					HEXT__(id__,
								param_lvel,
								param_avel) = O__(id__,
								param_lvel,
								param_avel) [|shared_variable_events|] SKIP
					FVS_C__(id__,
								param_lvel,
								param_avel) = dbisim(timed_priority(STM(id__,
								param_lvel,
								param_avel) \ internal_events))
					HUP__(id__,
								param_lvel,
								param_avel) = timed_priority(O__(id__,
								param_lvel,
								param_avel) [|{share__}|] SKIP)
					
					-- Clocks
					
					Clocks(id__) = terminate -> SKIP
					
					clockSync = {||}
					
					
					StateClocks(id__) = terminate -> SKIP
					
					stateClockSync = {||}
					}
						endmodule
		
			-- declaring machines
			module TurtleBot3FSMRC
			exports
				transparent diamond
				transparent sbisim
				transparent dbisim
				transparent chase
			
				-- Transition identifiers
				-- declaring identifiers of transitions
				datatype NIDS = 
				              NID_i0|
				              NID_Forward|
				              NID_Turning
				
				channel internal__ : NIDS
				
				-- Flow channels		
				channel interrupt
				channel exited
				channel exit
				channel terminate
				
				-- Variable channels
				
				-- Shared variable channels
				
				-- Local variable channels for defined operations that are required by the state machine
				
				-- Declaring state machine events
				
				-- Declaring call and ret events for undefined operations
				channel cmd_velCall: myPackage_Twist
				
				enterSS = {|
				i0::enter,
				Forward::enter,
				Turning::enter
				|}
				
				enteredSS = 	{|
				Forward::entered,
				Turning::entered
				|}
				
				internal_events = union(enteredSS,union(enterSS,{|interrupt,exited|}))
				
				shared_variable_events = {|
				|}
				
				-- channel set with all visible events
				sem__events = {|
					terminate
				,	cmd_velCall
					|}
				datatype ClockSet = 
					CLID_C
				
				channel clockReset, clockResetL, clockResetR : ClockSet
				
				localClockResets = {|clockReset.CLID_C|}
				
				
				channel get_CLID_Turning : core_clock_type 
				channel get_CLID_C : core_clock_type 
				channel get_CLID_Forward : core_clock_type 
				--channel increment__
				
				CLID_Turning_clock_type(id__,
						          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
						          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_C_clock_type(id__,
						          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
						          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
					let
						max = (clock_type_max(Union({
				({4}),
				({1})
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				CLID_Forward_clock_type(id__,
						          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
						          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
					let
						max = (clock_type_max(Union({
				{}
				}))+1)
					ctype = {0..max}
				within
					if member(max,core_clock_type) then ctype else error("core_clock_type is not wide enough")
				
				
			
					-- Nodes --
					-- declaring all nodes
					
					----------------------------------------------------------------------
					-- Initial: i0
					module i0
					exports
					
						channel enter, interrupt
						
						Timed(OneStep) {
							D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
								dbisim(let
									Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
									
									Termination = terminate -> SKIP
									
									Active 		= share__choice(interrupt -> SKIP) ; Inactive
								within
									Inactive [| {terminate} |> SKIP)
							
							VS_O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Forward
					module Forward
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel,
											const_myPackage_Driving_TurtleBot3FSMRC_lvel,
											0
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel,
											const_myPackage_Driving_TurtleBot3FSMRC_lvel,
											0
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					
					----------------------------------------------------------------------
					-- State: Turning
					module Turning
					
					enterSS = {}
					
					enteredSS = {}
					
					exports
					
						--  Declarations
						
						channel enter, entered, interrupt
						channel enteredL, enteredR
						
										
						
						--channel increment__
						
						
						--	Nodes
						-- declaring all nodes
						
						
						Timed(OneStep) {
							--	Rule: behaviours(Node)
							--  Note that FDR has problems with efficiently compiling the process below
							-- 	if using a different recursion pattern.
							D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
							dbisim(let
								-- IMPLEMENTATION NOTE: 
								-- The following should be defined as: Inactive = share__choice(Activation [] Termination),
								-- however FDR struggles with that form in certain cases. So we use the exception operator
								-- instead to 'terminate'.
								
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel,
											0,
											const_myPackage_Driving_TurtleBot3FSMRC_avel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
								
							VS_O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
							dbisim(let
								Inactive 	= share__choice(enter -> SKIP [] terminate -> SKIP) ; Active
								
								Termination = terminate -> SKIP
								
								Active 		= true&CALL__move(
											id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel,
											0,
											const_myPackage_Driving_TurtleBot3FSMRC_avel
										) ; 
										 	  Behaviour ; 
										 	  share__choice(exit -> SKIP) ; SKIP ; 
										 	  share__choice(exited -> SKIP) ; Inactive
							
								Behaviour 	= entered -> During
								During 		= ((SKIP ; SStop) /\ interrupt -> SKIP)
							within
								Inactive [| {terminate} |> SKIP)
							
							
							-- Clocks
							
							StateClocks(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel) = terminate -> SKIP
							
							stateClockSync = {||}
						}
					
					endmodule
					----------------------------------------------------------------------
					
					-- END of Nodes --
					
					Timed(OneStep) {
					-- Operation calls --
					-- Only the undefined operations are declared here.
					-- If the state machine is in isolation, all required operations will be undefined.
					-- If it is in the context of a controller, the required operations not provided by the
					-- controller will be declared here, and the defined operations will be defined in the
					-- context of the Controller module, and therefore within scope of the state machine module.
					CALL__cmd_vel(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel,
								param_msg) = EDeadline(cmd_velCall.param_msg,0)
					
					CALL__move(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel,
								param_lvel,
								param_avel) = (OP_move::O__(id__,
								param_lvel,
								param_avel))
					[[
						OP_move::cmd_velCall <- cmd_velCall
					]]
					-- END of Operation calls --
				
					-- STM processes
					STM(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful(id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
								    const_myPackage_Driving_TurtleBot3FSMRC_avel))
					)\sharedVarHide
					
					STM_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = -- RULE: [[stm:StateMachineDef]]_STM^nops : CSPProcess
					( 
						(
							(
								(IteratedStateful_VS_O(id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel) \ {terminate} ; share__choice(terminate -> SKIP))
							 	[[ share__ <- x__ | x__ <- {||} ]]
							)
						[| {share__} |]
						SKIP
						)
						[| union(sharedVarSync,{terminate}) |]
						dbisim(sharedVarMemory(id__,
								    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
								    const_myPackage_Driving_TurtleBot3FSMRC_avel))
					)\sharedVarHide
					
					-- Transitions
					Transitions(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = ((let
						Trans = share__choice(get_CLID_C?C:CLID_C_clock_type(id__,
								          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
								          const_myPackage_Driving_TurtleBot3FSMRC_avel) -> TimeOut_1(
							 (share__ -> SKIP
							 [] dbisim((true)&(internal__!NID_i0 -> SKIP ;  ((share__choice(clockReset.CLID_C -> SKIP) ; Forward::enter -> SKIP))))
							 [] dbisim(((C>=4))&(internal__!NID_Forward -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(clockReset.CLID_C -> SKIP) ; Turning::enter -> SKIP)))
							 [] dbisim(((C>1))&(internal__!NID_Turning -> SKIP ;  share__choice(exit -> SKIP) ; (share__choice(exited -> SKIP) ; share__choice(clockReset.CLID_C -> SKIP) ; Forward::enter -> SKIP)))
							 []
							 (interrupt -> share__choice(exit -> SKIP) ; share__choice(exited -> terminate -> SKIP))
							 []
							 terminate -> SKIP
							 )
						,SKIP);Trans
						)
					within
						Trans [|{terminate}|> SKIP
					)
					)
					
					-- Stateful
					-- RULE: Stateful(stm:StateMachineBody) : CSPProcess
					
					-- Named process definitions
					MachineBody(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								Forward::enter,
								Turning::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,internal__.NID_Forward,internal__.NID_Turning|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::D__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   [| { share__, terminate } |] (
									   Forward::D__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   [| { share__, terminate } |] (
									   Turning::D__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   )
									   )
									 )
									 [[Forward::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Forward|}]]
									 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									 		    const_myPackage_Driving_TurtleBot3FSMRC_avel))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Forward,Forward::entered|}
						 within
							(MachineBody(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)) \ union(stateClockSync,enteredSS)
						)
						)
					
					IteratedBehaviour(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Forward,Forward::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody(id__,
													    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
													    const_myPackage_Driving_TurtleBot3FSMRC_avel)
											[| {|get_CLID_Forward,Forward::entered,terminate|} |]
											dbisim(Clock_CLID_Forward(id__,0,
													          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
													          const_myPackage_Driving_TurtleBot3FSMRC_avel))
										)\{|get_CLID_Forward|}
									)
									[| {|get_CLID_Turning,Turning::entered,terminate|} |]
									dbisim(Clock_CLID_Turning(id__,0,
											          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
											          const_myPackage_Driving_TurtleBot3FSMRC_avel))
								)\{|get_CLID_Turning|}
							)
							) \ union(stateClockSync,enteredSS)
						)
						)
					
					Stateful(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		    const_myPackage_Driving_TurtleBot3FSMRC_avel) [| {terminate} |] Clocks(id__,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_avel))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) =
						(dbisim(
							sbisim(
								IteratedBehaviour(id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel)
								[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
								dbisim(Clock_CLID_C(id__,0,
										          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										          const_myPackage_Driving_TurtleBot3FSMRC_avel))
							)\{|get_CLID_C,clockReset.CLID_C|}
						)
						)
					
					-- Visible counterparts
					MachineBody_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((
						let
							finalNodesEntered = {||}
						within
							(dbisim((dbisim((let
								-- IMPLEMENTATION NOTE:
								-- Here the 'enter' channel set is calculated explicitly because of the use of CSPM 
								-- modules for defining the semantics of each node.
								enterSS = {|
								i0::enter,
								Forward::enter,
								Turning::enter
								|}
								hideSet = union(enterSS,{|exit,exited,internal__|})
							within 
								((let
									-- IMPLEMENTATION NOTE: the channel set 'enter' is calculated explicitly
									-- because CSPM modules are used for the semantics of Node.
									flowevts = union(enterSS,{|exit,exited,interrupt|})
									transSync = {|internal__.NID_i0,internal__.NID_Forward,internal__.NID_Turning|}
								within
									((
									 (((-- RULE composeNodes(nc:NodeContainer)^nops : CSPProcess
									   i0::VS_O__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   [| { share__, terminate } |] (
									   Forward::VS_O__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   [| { share__, terminate } |] (
									   Turning::VS_O__(id__,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									   		    const_myPackage_Driving_TurtleBot3FSMRC_avel)
									   )
									   )
									 )
									 [[Forward::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Forward|}]]
									 [[Turning::interrupt <- x__ | x__ <- {|interrupt,internal__.NID_Turning|}]]
									 [[i0::interrupt <- x__ | x__ <- {|internal__.NID_i0|}]]
									 )
									  [[ share__ <- x__ | x__ <- {| share__ |} ]] 
									  [[clockReset.CLID_C <- clockResetL.CLID_C]]
									 )
									 [| union(union(union(flowevts,transSync),{terminate}),{|share__
									 			,clockResetL.CLID_C
									|}) |]
									 ((i0::enter -> Transitions(id__,
									 		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									 		    const_myPackage_Driving_TurtleBot3FSMRC_avel))
									  [[ share__ <- x__ | x__ <- {| share__,clockResetL.CLID_C |} ]]
									 )
									)[[clockResetL.CLID_C <- clockReset.CLID_C]]
									)
								)
								 \ hideSet)
							)
							)
							 [| union(stateClockSync,{terminate}) |]
							 StateClocks(id__,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							)\diff(stateClockSync,enteredSS))
							 [| {| interrupt |} |] SKIP)
						)
						)
					
					Behaviour_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Forward,Forward::entered|}
						 within
							(MachineBody_VS_O(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) [| union(stateClockSync,{terminate}) |] StateClocks(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					IteratedBehaviour_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((let
							stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Forward,Forward::entered|}
						 within
							(dbisim(
								sbisim(
									dbisim(
										sbisim(
											MachineBody_VS_O(id__,
													    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
													    const_myPackage_Driving_TurtleBot3FSMRC_avel)
											[| {|get_CLID_Forward,Forward::entered,terminate|} |]
											dbisim(Clock_CLID_Forward(id__,0,
													          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
													          const_myPackage_Driving_TurtleBot3FSMRC_avel))
										)\{|get_CLID_Forward|}
									)
									[| {|get_CLID_Turning,Turning::entered,terminate|} |]
									dbisim(Clock_CLID_Turning(id__,0,
											          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
											          const_myPackage_Driving_TurtleBot3FSMRC_avel))
								)\{|get_CLID_Turning|}
							)
							) \ diff(union(stateClockSync,enteredSS),enteredSS)
						)
						)
					
					Stateful_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						dbisim((let
							getsetLocalChannels = {||}
							clockSync = {|get_CLID_C,clockReset.CLID_C|}
						within
							(Behaviour_VS_O(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel) 
							 [| union(union(getsetLocalChannels,clockSync),{terminate}) |] 
							 (varMemory(id__,
							 		    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		    const_myPackage_Driving_TurtleBot3FSMRC_avel) [| {terminate} |] Clocks(id__,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							 		          const_myPackage_Driving_TurtleBot3FSMRC_avel))
						 	)\union(getsetLocalChannels,clockSync)
						)
						)
					
					IteratedStateful_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) =
						(dbisim(
							sbisim(
								IteratedBehaviour_VS_O(id__,
										    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										    const_myPackage_Driving_TurtleBot3FSMRC_avel)
								[| {|get_CLID_C,clockReset.CLID_C,terminate|} |]
								dbisim(Clock_CLID_C(id__,0,
										          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
										          const_myPackage_Driving_TurtleBot3FSMRC_avel))
							)\{|get_CLID_C,clockReset.CLID_C|}
						)
						)
					
					-- END
					
					-- Memory
					-- Memory variables
					
					-- varMemory process
					varMemory(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = terminate -> SKIP
					
					getsetLocalChannels = {||}
					
					-- Definition of the behaviour of state machines (default, optimised, visible, visible and optimised)
					FVS__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = STM_VS_O(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) \ localClockResets
					D__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = timed_priority(STM(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) \ union(internal_events,localClockResets))
					O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(D__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel))
					VS__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = FVS__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel)
					VS_O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(FVS__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel))
					HEXT__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) [|shared_variable_events|] SKIP
					FVS_C__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(timed_priority(STM(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) \ internal_events))
					HUP__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = timed_priority(O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) [|{share__}|] SKIP)
					
					-- Clocks
					Clock_CLID_C(id__,x__,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						TimeOut_1(
							clockReset.CLID_C -> Clock_CLID_C(id__,0,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							get_CLID_C!x__ -> Clock_CLID_C(id__,x__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							terminate -> SKIP,Clock_CLID_C(id__,clock_type_plus(x__,1,CLID_C_clock_type(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)),
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					
					Clocks(id__,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(Clock_CLID_C(id__,0,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					
					clockSync = {|get_CLID_C,clockReset.CLID_C|}
					
					Clock_CLID_Turning(id__,x__,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						TimeOut_1(
							Turning::entered -> Clock_CLID_Turning(id__,0,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							get_CLID_Turning!x__ -> Clock_CLID_Turning(id__,x__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							terminate -> SKIP,Clock_CLID_Turning(id__,clock_type_plus(x__,1,CLID_Turning_clock_type(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)),
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					Clock_CLID_Forward(id__,x__,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel) = 
						TimeOut_1(
							Forward::entered -> Clock_CLID_Forward(id__,0,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							get_CLID_Forward!x__ -> Clock_CLID_Forward(id__,x__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)
							[]
							terminate -> SKIP,Clock_CLID_Forward(id__,clock_type_plus(x__,1,CLID_Forward_clock_type(id__,
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel)),
									          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					
					StateClocks(id__,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(Clock_CLID_Turning(id__,0,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					[| { terminate } |] (
					dbisim(Clock_CLID_Forward(id__,0,
							          const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							          const_myPackage_Driving_TurtleBot3FSMRC_avel))
					)
					
					stateClockSync = {|get_CLID_Turning,Turning::entered,get_CLID_Forward,Forward::entered|}
					
					-- Shared memory
					-- Shared memory variables
					
					-- sharedVarMemory process
					sharedVarMemory(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = terminate -> SKIP
					
					sharedVarSync = {||}
					
					sharedVarHide = {||}
					}
			endmodule
			
			Timed(OneStep) {
					-- undefined operations
					CALL__cmd_vel(id__,
							    param_msg) 	= cmd_velCall.param_msg -> SKIP
					
					-- declaring controller memory
					Memory(id__) = SKIP
					
					D__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = prioritise(	((
							TurtleBot3FSMRC::D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								TurtleBot3FSMRC::terminate <- terminate,
								TurtleBot3FSMRC::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>)
					
					-- VS version
					VS__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = prioritise(	((
							TurtleBot3FSMRC::VS__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								TurtleBot3FSMRC::terminate <- terminate,
								TurtleBot3FSMRC::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>)
				
					-- O version (optimised) THESE TWO PROCESSES SHOULD BE KEPT IN SYNC WITH THE ABOVE TWO
					O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(prioritise(	((
							TurtleBot3FSMRC::O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								TurtleBot3FSMRC::terminate <- terminate,
								TurtleBot3FSMRC::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>))
									
					-- VS_O version
					VS_O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(prioritise(	((
							TurtleBot3FSMRC::VS_O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								TurtleBot3FSMRC::terminate <- terminate,
								TurtleBot3FSMRC::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
					\ union(
						{|
						|},
						{|
						|}
					)
					[|{|terminate|}|>SKIP
					,<visibleMemoryEvents,{tock}>))
				
					HEXT(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) = O__(id__,
							    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
							    const_myPackage_Driving_TurtleBot3FSMRC_avel) [|shared_variable_events|] SKIP			
			}
	
		endmodule
	
	Timed(OneStep) {
		visibleMemoryEvents = {||}
		
		-- declaring module memory
		Memory(id__) = SKIP
		
		D__(id__,
				    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
				    const_myPackage_Driving_TurtleBot3FSMRC_avel) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::D__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- visible state equivalent
		
		VS__(id__,
				    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
				    const_myPackage_Driving_TurtleBot3FSMRC_avel) = prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::VS__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						Memory(id__)
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>)
		
		-- O version (optimised)
		
		O__(id__,
				    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
				    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- visible state optimised equivalent
		
		VS_O__(id__,
				    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
				    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(prioritise(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::VS_O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		,<visibleMemoryEvents,{tock}>))
		
		-- O version (optimised) with visible assignments
		
		AS_O__(id__,
				    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
				    const_myPackage_Driving_TurtleBot3FSMRC_avel) = dbisim(	(
				(
					(SKIP)
						[|{||}|]
					(
						(
							ctrl_ref0::O__(id__,
									    const_myPackage_Driving_TurtleBot3FSMRC_lvel,
									    const_myPackage_Driving_TurtleBot3FSMRC_avel)[[
								ctrl_ref0::terminate <- terminate,
								ctrl_ref0::cmd_velCall <- cmd_velCall
							]]
						)
							[|
								union(
									{|
									|},
									{|
									|}
								)
							|]
						dbisim(Memory(id__))
					)
				)
				\ Union({
					{|
					|},
					{|
					|},
					{|
					|}
				})
				[|{|terminate|}|>SKIP
			)
			\{|terminate|}
		)
	}
	
endmodule
